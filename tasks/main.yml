---
# tasks file for ansible-role-opensearch

- name: "Include {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: Include trombik.x509_certificate if opensearch_include_role_x509_certificate is true
  include_role:
    name: trombik.x509_certificate
  vars:
    x509_certificate_vars: "{{ opensearch_x509_certificate_vars }}"
  when: opensearch_include_role_x509_certificate

- name: Create data directory
  ansible.builtin.file:
    path: "{{ opensearch_db_dir }}"
    state: directory
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: 0755

- name: Create opensearch_log_dir directory
  ansible.builtin.file:
    path: "{{ opensearch_log_dir }}"
    state: directory
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: 0755

- name: Create path.scripts directory if specified
  # XXX this should have been created by package
  ansible.builtin.file:
    path: "{{ opensearch_scripts_dir }}"
    state: directory
    mode: 0755
  when:
    - opensearch_scripts_dir | length > 0

- name: Create opensearch_conf_dir
  ansible.builtin.file:
    path: "{{ opensearch_conf_dir }}"
    # XXX OpenDistroSecurityPlugin insists it should be 0700
    # [c.a.o.s.OpenDistroSecurityPlugin] [testnode] Directory /etc/opensearch has insecure file permissions (should be 0700)
    # XXX opendistro_security 1.3.0.0 does not.
    mode: 0755
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    state: directory

- name: Create jvm.options
  ansible.builtin.template:
    src: jvm.options.j2
    dest: "{{ opensearch_conf_dir }}/jvm.options"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: 0644
  notify:
    - Restart opensearch

- name: Create log4j2.properties
  ansible.builtin.template:
    src: log4j2.properties.j2
    dest: "{{ opensearch_conf_dir }}/log4j2.properties"
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
    mode: 0644
  notify:
    - Restart opensearch

- name: Create opensearch.yml
  ansible.builtin.template:
    src: opensearch.yml.j2
    dest: "{{ opensearch_conf_file }}"
    mode: 0440
    owner: "{{ opensearch_user }}"
    group: "{{ opensearch_group }}"
  notify:
    - Restart opensearch

- name: Register installed plugins
  shell: "{{ opensearch_plugin_command }} list"
  environment:
    JAVA_HOME: "{{ opensearch_java_home }}"
  register: shell_output
  changed_when: False

- name: Create plugins directory
  ansible.builtin.file:
    path: "{{ opensearch_plugins_dir }}"
    # owner: "{{ opensearch_user }}"
    # group: "{{ opensearch_group }}"
    mode: 0755
    state: directory

- name: Install plugins
  command: "{{ opensearch_plugin_command }} install --batch {% if 'src' in item %}{{ item.src }}{% else %}{{ item.name }}{% endif %}"
  environment:
    JAVA_HOME: "{{ opensearch_java_home }}"
  with_items: "{{ opensearch_plugins }}"
  when:
    - "(not 'state' in item ) or (item['state'] == 'present')"
    - "not (shell_output.stdout is search(item['name']))"

- name: Create basedir of opensearch_extra_plugin_files
  ansible.builtin.file:
    path: "{{ opensearch_plugins_dir }}/{{ item.path | dirname }}"
    state: directory
    mode: 0755
  with_items: "{{ opensearch_extra_plugin_files }}"
  when:
    - "(not 'state' in item) or (item['state'] == 'present')"

- name: Create opensearch_extra_plugin_files
  ansible.builtin.template:
    src: "{{ item.type }}.j2"
    dest: "{{ opensearch_plugins_dir }}/{{ item.path }}"
    mode: "{{ item.mode | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
  with_items: "{{ opensearch_extra_plugin_files }}"
  register: __register_opensearch_extra_plugin_files_create
  when:
    - "(not 'state' in item) or (item['state'] == 'present')"

- name: Delete opensearch_extra_plugin_files
  ansible.builtin.file:
    path: "{{ opensearch_plugins_dir }}/{{ item.path }}"
    state: absent
    mode: 0755
  with_items: "{{ opensearch_extra_plugin_files }}"
  when:
    - "'state' in item"
    - "item['state'] == 'absent'"

- name: Start opensearch
  ansible.builtin.service:
    name: "{{ opensearch_service }}"
    state: started
    enabled: yes
  register: register_opensearch_start

- name: Wait for opensearch to start in task
  ansible.builtin.wait_for:
    host: "{{ opensearch_http_host }}"
    port: "{{ opensearch_http_port }}"
  when:
    - register_opensearch_start.changed

- name: Wait for opensearch cluster status to become opensearch_wait_for_cluster_status
  ansible.builtin.uri:
    url: "{{ opensearch_http_url }}/_cluster/health?wait_for_status={{ opensearch_wait_for_cluster_status }}&timeout={{ opensearch_wait_for_cluster_status_timeout }}"
    validate_certs: "{{ opensearch_http_auth['validate_certs'] | default(omit) }}"
    client_cert: "{{ opensearch_http_auth['client_cert'] | default(omit) }}"
    client_key: "{{ opensearch_http_auth['client_key'] | default(omit) }}"
    ca_path: "{{ opensearch_http_auth['ca_path'] | default(omit) }}"
    url_username: "{{ opensearch_http_auth['url_username'] | default(omit) }}"
    url_password: "{{ opensearch_http_auth['url_password'] | default(omit) }}"
  register: __register_opensearch_cluster_health
  retries: "{{ opensearch_wait_for_cluster_status_retry }}"
  until:
    - "'json' in __register_opensearch_cluster_health"
    - "'status' in __register_opensearch_cluster_health['json']"
    - __register_opensearch_cluster_health['json']['status'] == 'yellow' or __register_opensearch_cluster_health['json']['status'] == 'green'
  when:
    - (opensearch_wait_for_cluster_status)

- name: Run post_command in opensearch_extra_plugin_files
  # XXX at the moment, only security plugin needs `post_command`. for the
  # completeness, `post_command` should have been executed when a file is
  # removed. will consider to do so when such use-cases arise.
  #
  # this might have been implemented with a handler. however, handlers run at
  # the end of play. with this implementation, other roles or tasks after this
  # role are able to assume the security settings are up-to-date.
  #
  # running commands in a loop is inefficient because securityadmin.sh need
  # to run once to update all files.
  #
  # XXX do not use FQCN here for older ansible version on Ubuntu
  command:
    cmd: "{{ item['item']['post_command']['cmd'] }}"
  args:
    # XXX i do not want to hard-code `chdir` and others here, but ansile complains.
    # see "When is it unsafe to bulk-set task arguments from a variable?"
    # https://docs.ansible.com/ansible/devel/reference_appendices/faq.html#when-is-it-unsafe-to-bulk-set-task-arguments-from-a-variable
    chdir: "{{ item['item']['post_command']['args']['chdir'] | default(omit) }}"
    creates: "{{ item['item']['post_command']['args']['creates'] | default(omit) }}"
    removes: "{{ item['item']['post_command']['args']['removes'] | default(omit) }}"
  environment:
    JAVA_HOME: "{{ opensearch_java_home }}"
  with_items: "{{ __register_opensearch_extra_plugin_files_create['results'] }}"
  when:
    - item['changed'] == true
    - "'post_command' in item['item']"
    - item['item']['post_command']['enabled'] | bool
